all_seasons$home_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$HomeTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$away_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$AwayTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$home_team_margin <- all_seasons$home_team_score - all_seasons$away_team_score
final_scores <- all_seasons %>%
group_by(GameID) %>%
filter(row_number()==n())
final_scores <- final_scores[,c("GameID", "home_team_margin")]
names(final_scores) <- c("GameID", "home_team_margin_final")
all_seasons <- merge(all_seasons, final_scores, by = "GameID")
all_seasons$home_team_pos_ball <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, 0)
all_seasons$home_team_pos_ball_neg <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, -1)
all_seasons$home_team_margin_final <- all_seasons$home_team_margin_final_validate
# rm(season2009)
# rm(season2010)
# rm(season2011)
# rm(season2012)
# rm(season2013)
# rm(season2014)
# rm(season2015)
# rm(season2016)
# rm(season2017)
# rm(season2018)
#partition
inTrain <- createDataPartition(y=all_seasons$home_team_margin_final, p=0.05, list = FALSE)
training <- all_seasons[inTrain,]
testing <- all_seasons[-inTrain,]
#calculate play-by-play spread changes
setwd("/Users/evanthompson/SDP/spread")
#load packages
library(nflscrapR)
library(nnet)
library(dplyr)
library(caret)
library(lubridate)
library(rpart)
library(tictoc)
tic()
# # load 2018 play-by-play data
# season2009 <- season_play_by_play(Season = 2009)
# season2010 <- season_play_by_play(Season = 2010)
# season2011 <- season_play_by_play(Season = 2011)
# season2012 <- season_play_by_play(Season = 2012)
# season2013 <- season_play_by_play(Season = 2013)
# season2014 <- season_play_by_play(Season = 2014)
# season2015 <- season_play_by_play(Season = 2015)
# season2016 <- season_play_by_play(Season = 2016)
# season2017 <- season_play_by_play(Season = 2017)
# season2018 <- season_play_by_play(Season = 2018)
#
#
# # binding into a single dataset
# all_seasons_orig <- rbind(season2009, season2010, season2011, season2012,
#                      season2013,season2014, season2015, season2016,
#                      season2017, season2018)
# saveRDS(all_seasons_orig, file = "/Users/evanthompson/SDP/spread_data/all_seasons_orig.rds")
#start from here
all_seasons_orig <- readRDS("~/SDP/spread_data/all_seasons_orig.rds")
all_seasons <- all_seasons_orig
historicalspreads_clean <- read.csv("~/SDP/spread_data/historicalspreads_clean.csv")
historicalspreads_clean$Date <- as.POSIXlt(mdy(as.character(historicalspreads_clean$Date)))
#merge on historical spreads by HomeTeam, Date
all_seasons <- merge(all_seasons, historicalspreads_clean, by = c("Date", "HomeTeam"))
#cleaning
all_seasons <- all_seasons[ which(is.na(all_seasons$ExPointResult)),]
all_seasons <- all_seasons[ which(is.na(all_seasons$TwoPointConv)),]
all_seasons$DefensiveTeam <- ifelse(all_seasons$DefensiveTeam == "JAX", "JAC", all_seasons$DefensiveTeam)
all_seasons <- all_seasons[ which(!is.na(all_seasons$down)),]
all_seasons$por <- ifelse(substr(all_seasons$desc, start=5, stop=21) == "play under review", 1, 0)
all_seasons <- all_seasons[ which( all_seasons$por == 0),]
all_seasons <- all_seasons[ which(all_seasons$qtr != 5),]
all_seasons$DesiredPlayType <- ifelse(all_seasons$PlayType == "Run" | all_seasons$PlayType == "Pass"
| all_seasons$PlayType == "Field Goal" | all_seasons$PlayType == "Sack"
| all_seasons$PlayType == "Punt",1,0)
all_seasons <- all_seasons[ which(all_seasons$DesiredPlayType == 1),]
all_seasons$offense_year <- paste(all_seasons$posteam, all_seasons$Season, sep = "_", collapse = NULL)
all_seasons$defense_year <- paste(all_seasons$DefensiveTeam, all_seasons$Season, sep = "_", collapse = NULL)
all_seasons$AwayTeam <- all_seasons$AwayTeam.x
# all_seasons$end_of_half <- ifelse(all_seasons$TimeSecs <= 2040 & all_seasons$TimeSecs >= 1800, 1, 0)
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$end_of_half_remove <- 0
# for (k in 1:nrow(all_seasons) - 1){
#   all_seasons$end_of_half_remove[k] <- ifelse(all_seasons$end_of_half[k] == 1 &
#                                                 all_seasons$Drive[k] == all_seasons$Drive[k+1], 1, 0)
# }
# all_seasons$end_of_half_remove <- ifelse(all_seasons$TimeSecs <= 1840 & all_seasons$TimeSecs >= 1800, 1, 0)
# all_seasons <- all_seasons[ which(all_seasons$end_of_half_remove == 0 | all_seasons$end_of_half_remove == "NA"), ]
# all_seasons$clock_melt_1 <- ifelse(all_seasons$qtr == 4 & all_seasons$AbsScoreDiff > 17, 1, 0)
# all_seasons$clock_melt_2 <- ifelse(all_seasons$TimeSecs < 300 & all_seasons$AbsScoreDiff > 8, 1, 0)
# all_seasons$clock_melt_3 <- ifelse(all_seasons$TimeSecs < 240, 1, 0)
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$clock_melt <- 0
# for (k in 1:nrow(all_seasons)){
#   all_seasons$clock_melt[k] <- max(all_seasons$clock_melt_1[k], all_seasons$clock_melt_2[k], all_seasons$clock_melt_3[k])
# }
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$clock_melt_remove <- 0
# for (k in 1:nrow(all_seasons) - 1){
#   all_seasons$clock_melt_remove[k] <- ifelse(all_seasons$clock_melt[k] == 1 &
#                                                all_seasons$Drive[k] == all_seasons$Drive[k+1], 1, 0)
# }
# all_seasons <- all_seasons[ which(all_seasons$clock_melt_remove != 1), ]
#end data cleaning
#create data labels
all_seasons$home_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$HomeTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$away_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$AwayTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$home_team_margin <- all_seasons$home_team_score - all_seasons$away_team_score
final_scores <- all_seasons %>%
group_by(GameID) %>%
filter(row_number()==n())
final_scores <- final_scores[,c("GameID", "home_team_margin")]
names(final_scores) <- c("GameID", "home_team_margin_final")
all_seasons <- merge(all_seasons, final_scores, by = "GameID")
all_seasons$home_team_pos_ball <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, 0)
all_seasons$home_team_pos_ball_neg <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, -1)
all_seasons$home_team_margin_final <- all_seasons$home_team_margin_final_validate
# rm(season2009)
# rm(season2010)
# rm(season2011)
# rm(season2012)
# rm(season2013)
# rm(season2014)
# rm(season2015)
# rm(season2016)
# rm(season2017)
# rm(season2018)
#partition
inTrain <- createDataPartition(y=all_seasons$home_team_margin_final, p=0.05, list = FALSE)
training <- all_seasons[inTrain,]
testing <- all_seasons[-inTrain,]
#calculate play-by-play spread changes
setwd("/Users/evanthompson/SDP/spread")
#load packages
library(nflscrapR)
library(nnet)
library(dplyr)
library(caret)
library(lubridate)
library(rpart)
library(tictoc)
tic()
# # load 2018 play-by-play data
# season2009 <- season_play_by_play(Season = 2009)
# season2010 <- season_play_by_play(Season = 2010)
# season2011 <- season_play_by_play(Season = 2011)
# season2012 <- season_play_by_play(Season = 2012)
# season2013 <- season_play_by_play(Season = 2013)
# season2014 <- season_play_by_play(Season = 2014)
# season2015 <- season_play_by_play(Season = 2015)
# season2016 <- season_play_by_play(Season = 2016)
# season2017 <- season_play_by_play(Season = 2017)
# season2018 <- season_play_by_play(Season = 2018)
#
#
# # binding into a single dataset
# all_seasons_orig <- rbind(season2009, season2010, season2011, season2012,
#                      season2013,season2014, season2015, season2016,
#                      season2017, season2018)
# saveRDS(all_seasons_orig, file = "/Users/evanthompson/SDP/spread_data/all_seasons_orig.rds")
#start from here
all_seasons_orig <- readRDS("~/SDP/spread_data/all_seasons_orig.rds")
all_seasons <- all_seasons_orig
historicalspreads_clean <- read.csv("~/SDP/spread_data/historicalspreads_clean.csv")
historicalspreads_clean$Date <- as.POSIXlt(mdy(as.character(historicalspreads_clean$Date)))
#merge on historical spreads by HomeTeam, Date
all_seasons <- merge(all_seasons, historicalspreads_clean, by = c("Date", "HomeTeam"))
#cleaning
all_seasons <- all_seasons[ which(is.na(all_seasons$ExPointResult)),]
all_seasons <- all_seasons[ which(is.na(all_seasons$TwoPointConv)),]
all_seasons$DefensiveTeam <- ifelse(all_seasons$DefensiveTeam == "JAX", "JAC", all_seasons$DefensiveTeam)
all_seasons <- all_seasons[ which(!is.na(all_seasons$down)),]
all_seasons$por <- ifelse(substr(all_seasons$desc, start=5, stop=21) == "play under review", 1, 0)
all_seasons <- all_seasons[ which( all_seasons$por == 0),]
all_seasons <- all_seasons[ which(all_seasons$qtr != 5),]
all_seasons$DesiredPlayType <- ifelse(all_seasons$PlayType == "Run" | all_seasons$PlayType == "Pass"
| all_seasons$PlayType == "Field Goal" | all_seasons$PlayType == "Sack"
| all_seasons$PlayType == "Punt",1,0)
all_seasons <- all_seasons[ which(all_seasons$DesiredPlayType == 1),]
all_seasons$offense_year <- paste(all_seasons$posteam, all_seasons$Season, sep = "_", collapse = NULL)
all_seasons$defense_year <- paste(all_seasons$DefensiveTeam, all_seasons$Season, sep = "_", collapse = NULL)
all_seasons$AwayTeam <- all_seasons$AwayTeam.x
# all_seasons$end_of_half <- ifelse(all_seasons$TimeSecs <= 2040 & all_seasons$TimeSecs >= 1800, 1, 0)
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$end_of_half_remove <- 0
# for (k in 1:nrow(all_seasons) - 1){
#   all_seasons$end_of_half_remove[k] <- ifelse(all_seasons$end_of_half[k] == 1 &
#                                                 all_seasons$Drive[k] == all_seasons$Drive[k+1], 1, 0)
# }
# all_seasons$end_of_half_remove <- ifelse(all_seasons$TimeSecs <= 1840 & all_seasons$TimeSecs >= 1800, 1, 0)
# all_seasons <- all_seasons[ which(all_seasons$end_of_half_remove == 0 | all_seasons$end_of_half_remove == "NA"), ]
# all_seasons$clock_melt_1 <- ifelse(all_seasons$qtr == 4 & all_seasons$AbsScoreDiff > 17, 1, 0)
# all_seasons$clock_melt_2 <- ifelse(all_seasons$TimeSecs < 300 & all_seasons$AbsScoreDiff > 8, 1, 0)
# all_seasons$clock_melt_3 <- ifelse(all_seasons$TimeSecs < 240, 1, 0)
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$clock_melt <- 0
# for (k in 1:nrow(all_seasons)){
#   all_seasons$clock_melt[k] <- max(all_seasons$clock_melt_1[k], all_seasons$clock_melt_2[k], all_seasons$clock_melt_3[k])
# }
# all_seasons <- all_seasons[order(all_seasons$GameID, -all_seasons$TimeSecs),]
# all_seasons$clock_melt_remove <- 0
# for (k in 1:nrow(all_seasons) - 1){
#   all_seasons$clock_melt_remove[k] <- ifelse(all_seasons$clock_melt[k] == 1 &
#                                                all_seasons$Drive[k] == all_seasons$Drive[k+1], 1, 0)
# }
# all_seasons <- all_seasons[ which(all_seasons$clock_melt_remove != 1), ]
#end data cleaning
#create data labels
all_seasons$home_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$HomeTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$away_team_score <- as.numeric(ifelse(all_seasons$posteam == all_seasons$AwayTeam,
all_seasons$PosTeamScore,
all_seasons$DefTeamScore))
all_seasons$home_team_margin <- all_seasons$home_team_score - all_seasons$away_team_score
final_scores <- all_seasons %>%
group_by(GameID) %>%
filter(row_number()==n())
final_scores <- final_scores[,c("GameID", "home_team_margin")]
names(final_scores) <- c("GameID", "home_team_margin_final")
all_seasons <- merge(all_seasons, final_scores, by = "GameID")
all_seasons$home_team_pos_ball <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, 0)
all_seasons$home_team_pos_ball_neg <- ifelse(all_seasons$posteam == all_seasons$HomeTeam, 1, -1)
all_seasons$home_team_margin_final <- all_seasons$home_team_margin_final_validate
# rm(season2009)
# rm(season2010)
# rm(season2011)
# rm(season2012)
# rm(season2013)
# rm(season2014)
# rm(season2015)
# rm(season2016)
# rm(season2017)
# rm(season2018)
#partition
inTrain <- createDataPartition(y=all_seasons$home_team_margin_final, p=0.05, list = FALSE)
training <- all_seasons[inTrain,]
testing <- all_seasons[-inTrain,]
# load packages
library(rvest)
library(gdata)
# FiveThirtyEight MLB game predictions
url <- 'https://projects.fivethirtyeight.com/2019-nfl-predictions/games/'
webpage <- read_html(url)
#################################################
############### Dates, Home, Away ###############
#################################################
# Using CSS selectors to scrape data
chance_html <- html_nodes(webpage,'.chance')
team_html <- html_nodes(webpage,'.team')
# Converting data to text
chance <- html_text(chance_html)
team <- html_text(team_html)
# Convert to dataframe, reformat
chance <- as.data.frame(chance)
team <- as.data.frame(team)
# formatting
team <- team[c(130:nrow(team)),]#added 20191120
# team <- team[-c(1:33),]#delete row above, unhide this row if 538
#doesnt include the check boxes for playoff scenarios (ie, early in the season)
team <- as.data.frame(team)
team <- team[-c(33:nrow(team)),]
team <- as.data.frame(team)
chance <- chance[which(chance$chance != "Win prob."),]
chance <- as.data.frame(chance)
chance <- chance[-c(33:nrow(chance)),]
chance <- as.data.frame(chance)
df <- cbind(team,chance)
bye_week_test <- df[!duplicated(df$team),]
keeprows <- nrow(bye_week_test)
df <- df[c(1:keeprows),]
# team mappings
team <- c("L.A. Rams", "Seattle", "Arizona", "Cincinnati", "Atlanta", "Houston",
"Baltimore", "Pittsburgh", "Buffalo", "Tennessee", "Chicago", "Oakland",
"Jacksonville", "Carolina", "Minnesota", "N.Y. Giants", "New England",
"Washington", "N.Y. Jets", "Philadelphia", "Tampa Bay", "New Orleans",
"Denver", "L.A. Chargers", "Green Bay", "Dallas", "Indianapolis",
"Kansas City", "Cleveland", "San Francisco", "Miami", "Detroit")
abbr <- c("LA", "SEA", "ARI", "CIN", "ATL", "HOU", "BAL", "PIT", "BUF",
"TEN", "CHI", "OAK", "JAC", "CAR", "MIN", "NYG", "NE", "WAS",
"NYJ", "PHI", "TB", "NO", "DEN", "LAC", "GB", "DAL", "IND", "KC",
"CLE", "SF", "MIA", "DET")
# merge abbr
teamabbr <- cbind(team, abbr)
df$team <- trimws(df$team)
df <- merge(df, teamabbr, by="team", all.y =  FALSE, sort = FALSE)
###########################################################
############### Scrape and merge vegas odds ###############
###########################################################
# nfl moneylines
url <- 'http://www.vegasinsider.com/nfl/odds/las-vegas/money/'
webpage <- read_html(url)
# Using CSS selectors to scrape the Vegas section
vegas_html <- html_nodes(webpage,'.nowrap , .tabletext')
# Converting the Vegas data to text
vegas <- html_text(vegas_html)
# Convert to dataframe, reformat
vegas <- as.data.frame(vegas)
vegas <- vegas[-which(vegas$vegas == "Picks"),]
vegas <- as.data.frame(vegas)
vegas$keep <- 0
vegas$vegas <- trimws(vegas$vegas)
vegas <- vegas[which(vegas$vegas != ""),]
for (k in 0:(nrow(vegas)/11-1)){
vegas$keep[11*k + 1] <- 1
vegas$keep[11*k + 2] <- 1
vegas$keep[11*k + 5] <- 1
}
vegas <- vegas[which(vegas$keep == 1),]
vegas <- as.data.frame(vegas)
row.names(vegas) <- 1:nrow(vegas)
vegas <- vegas[1:(nrow(df)/2*3),]
vegas$odds <- ""
vegas <- data.frame(lapply(vegas, as.character), stringsAsFactors=FALSE)
for (k in 0:(nrow(vegas)/3-1)){
vegas$odds[3*k + 1] <- vegas$vegas[3*k + 3]
vegas$odds[3*k + 2] <- vegas$vegas[3*k + 3]
}
vegas <- vegas[-which(vegas$odds == ""),]
row.names(vegas) <- 1:nrow(vegas)
vegas$odds <- trimws(vegas$odds)
vegas$pos = regexpr('-', vegas$odds)
vegas$odds <- substr(vegas$odds,2,nchar(vegas$odds))
vegas$pos = regexpr('-', vegas$odds)
vegas$pos2 = regexpr('\\+', vegas$odds)
vegas$pos3 <- max(vegas$pos, vegas$pos2)
vegas$pos4 <- nchar(vegas$odds)
vegas$odds2 <- ""
for (k in 1:nrow(vegas)){
vegas$odds2[k] <- ifelse((k %% 2) == 0,
substr(vegas$odds[k],vegas$pos3[k],vegas$pos4[k]),
substr(vegas$odds[k],1,vegas$pos3[k] - 1))
}
vegas <- vegas[,c(1,8)]
names(vegas) <- c("team", "odds")
vegas <- vegas[!duplicated(vegas$team),]
#merge vegas odds onto df
df <- merge(df, vegas, by="team", all.x = TRUE, all.y = FALSE, sort = FALSE)
names(df) <- c("team", "winp", "abbr", "vegas_odds")
df$winp <- as.character(df$winp)
df$winp <- gsub("%", "", df$winp)
df$winp <- as.numeric(df$winp)
df$winp <- df$winp/100
df$vegas_odds <- as.numeric(df$vegas_odds)
View(df)
View(vegas)
# This program pulls FiveThirtyEight MLB game probabilities, along
# with Vegas odds, and then identifies all bets each day with
# an expected return over [3%]. Go hawks.
# load packages
library(rvest)
library(gdata)
# FiveThirtyEight MLB game predictions
url <- 'https://projects.fivethirtyeight.com/2019-nfl-predictions/games/'
webpage <- read_html(url)
#################################################
############### Dates, Home, Away ###############
#################################################
# Using CSS selectors to scrape data
chance_html <- html_nodes(webpage,'.chance')
team_html <- html_nodes(webpage,'.team')
# Converting data to text
chance <- html_text(chance_html)
team <- html_text(team_html)
# Convert to dataframe, reformat
chance <- as.data.frame(chance)
team <- as.data.frame(team)
# formatting
team <- team[c(130:nrow(team)),]#added 20191120
# team <- team[-c(1:33),]#delete row above, unhide this row if 538
#doesnt include the check boxes for playoff scenarios (ie, early in the season)
team <- as.data.frame(team)
team <- team[-c(33:nrow(team)),]
team <- as.data.frame(team)
chance <- chance[which(chance$chance != "Win prob."),]
chance <- as.data.frame(chance)
chance <- chance[-c(33:nrow(chance)),]
chance <- as.data.frame(chance)
df <- cbind(team,chance)
bye_week_test <- df[!duplicated(df$team),]
keeprows <- nrow(bye_week_test)
df <- df[c(1:keeprows),]
# team mappings
team <- c("L.A. Rams", "Seattle", "Arizona", "Cincinnati", "Atlanta", "Houston",
"Baltimore", "Pittsburgh", "Buffalo", "Tennessee", "Chicago", "Oakland",
"Jacksonville", "Carolina", "Minnesota", "N.Y. Giants", "New England",
"Washington", "N.Y. Jets", "Philadelphia", "Tampa Bay", "New Orleans",
"Denver", "L.A. Chargers", "Green Bay", "Dallas", "Indianapolis",
"Kansas City", "Cleveland", "San Francisco", "Miami", "Detroit")
abbr <- c("LA", "SEA", "ARI", "CIN", "ATL", "HOU", "BAL", "PIT", "BUF",
"TEN", "CHI", "OAK", "JAC", "CAR", "MIN", "NYG", "NE", "WAS",
"NYJ", "PHI", "TB", "NO", "DEN", "LAC", "GB", "DAL", "IND", "KC",
"CLE", "SF", "MIA", "DET")
# merge abbr
teamabbr <- cbind(team, abbr)
df$team <- trimws(df$team)
df <- merge(df, teamabbr, by="team", all.y =  FALSE, sort = FALSE)
View(df)
# nfl moneylines
url <- 'http://www.vegasinsider.com/nfl/odds/las-vegas/money/'
webpage <- read_html(url)
# Using CSS selectors to scrape the Vegas section
vegas_html <- html_nodes(webpage,'.nowrap , .tabletext')
# Converting the Vegas data to text
vegas <- html_text(vegas_html)
# Convert to dataframe, reformat
vegas <- as.data.frame(vegas)
vegas <- vegas[-which(vegas$vegas == "Picks"),]
vegas <- as.data.frame(vegas)
vegas$keep <- 0
vegas$vegas <- trimws(vegas$vegas)
vegas <- vegas[which(vegas$vegas != ""),]
# Converting the Vegas data to text
vegas <- html_text(vegas_html)
# Convert to dataframe, reformat
vegas <- as.data.frame(vegas)
vegas <- vegas[-which(vegas$vegas == "Picks"),]
# Converting the Vegas data to text
vegas <- html_text(vegas_html)
# Convert to dataframe, reformat
vegas <- as.data.frame(vegas)
vegas <- vegas[-which(vegas$vegas == "Picks"),]
# nfl moneylines
url <- 'http://www.vegasinsider.com/nfl/odds/las-vegas/money/'
webpage <- read_html(url)
# Using CSS selectors to scrape the Vegas section
vegas_html <- html_nodes(webpage,'.nowrap , .tabletext')
# Converting the Vegas data to text
vegas <- html_text(vegas_html)
# Convert to dataframe, reformat
vegas <- as.data.frame(vegas)
#vegas <- vegas[-which(vegas$vegas == "Picks"),]
vegas <- as.data.frame(vegas)
vegas$keep <- 0
vegas$vegas <- trimws(vegas$vegas)
vegas <- vegas[which(vegas$vegas != ""),]
for (k in 0:(nrow(vegas)/11-1)){
vegas$keep[11*k + 1] <- 1
vegas$keep[11*k + 2] <- 1
vegas$keep[11*k + 5] <- 1
}
vegas <- vegas[which(vegas$keep == 1),]
vegas <- as.data.frame(vegas)
row.names(vegas) <- 1:nrow(vegas)
vegas <- vegas[1:(nrow(df)/2*3),]
vegas$odds <- ""
vegas <- data.frame(lapply(vegas, as.character), stringsAsFactors=FALSE)
for (k in 0:(nrow(vegas)/3-1)){
vegas$odds[3*k + 1] <- vegas$vegas[3*k + 3]
vegas$odds[3*k + 2] <- vegas$vegas[3*k + 3]
}
vegas <- vegas[-which(vegas$odds == ""),]
row.names(vegas) <- 1:nrow(vegas)
vegas$odds <- trimws(vegas$odds)
vegas$pos = regexpr('-', vegas$odds)
vegas$odds <- substr(vegas$odds,2,nchar(vegas$odds))
vegas$pos = regexpr('-', vegas$odds)
vegas$pos2 = regexpr('\\+', vegas$odds)
vegas$pos3 <- max(vegas$pos, vegas$pos2)
vegas$pos4 <- nchar(vegas$odds)
vegas$odds2 <- ""
for (k in 1:nrow(vegas)){
vegas$odds2[k] <- ifelse((k %% 2) == 0,
substr(vegas$odds[k],vegas$pos3[k],vegas$pos4[k]),
substr(vegas$odds[k],1,vegas$pos3[k] - 1))
}
vegas <- vegas[,c(1,8)]
names(vegas) <- c("team", "odds")
vegas <- vegas[!duplicated(vegas$team),]
#merge vegas odds onto df
df <- merge(df, vegas, by="team", all.x = TRUE, all.y = FALSE, sort = FALSE)
names(df) <- c("team", "winp", "abbr", "vegas_odds")
df$winp <- as.character(df$winp)
df$winp <- gsub("%", "", df$winp)
df$winp <- as.numeric(df$winp)
df$winp <- df$winp/100
df$vegas_odds <- as.numeric(df$vegas_odds)
df$risk <- 1
df$win <- ifelse(df$vegas_odds > 0, df$vegas_odds/100, abs(100/df$vegas_odds))
df$implied <- ifelse(df$vegas_odds<0, df$vegas_odds/(df$vegas_odds - 100), 100/(df$vegas_odds+100))
df$ev <- df$winp*df$win - (1-df$winp)*df$risk
df$top <- ifelse(df$ev > 0.1, "*", "")
df$top <- ifelse(df$ev > 0.2, "**", df$top)
df <- df[order(-df$ev),]
df <- df[which(df$ev > 0.03),]
data_print <- df[, c(3, 4, 9)]
### Clean data for tweet output
date <- data.frame(Sys.Date(),"","NFL")
empty <- data.frame("","","")
names(date) <- c("abbr", "vegas_odds", "top")
names(empty) <- c("abbr", "vegas_odds", "top")
date$abbr <- as.character(date$abbr)
data_print$vegas_odds <- as.character(data_print$vegas_odds)
data_print <- rbind(date, empty, data_print)
#### Maybe here??? ####
data_print$vegas_odds <- as.character(data_print$vegas_odds)
str(data_print)
for (k in 3:nrow(data_print)){
data_print$vegas_odds[k] <- ifelse(substr(data_print$vegas_odds[k],1,1) == "-",
data_print$vegas_odds[k],
paste("+",data_print$vegas_odds[k],sep = ""))
}
data_print <- rbind(data_print, empty)
data_print <- rbind(data_print, empty)
data_print$abbr[nrow(data_print)] <- "#FreePicks #NFL #SportsGuy"
View(data_print)
